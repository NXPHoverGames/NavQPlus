diff --git a/drivers/rtc/rtc-pcf2131.c b/drivers/rtc/rtc-pcf2131.c
index 7e1a9e8587c0..8eb54cc705d4 100644
--- a/drivers/rtc/rtc-pcf2131.c
+++ b/drivers/rtc/rtc-pcf2131.c
@@ -1,157 +1,142 @@
+// SPDX-License-Identifier: GPL-2.0-only
 /*
+ * An I2C and SPI driver for the NXP PCF2131 RTC
+ *
+ * Copyright 2013 Til-Technologies
+ * Author: Renaud Cerrato <r.cerrato@til-technologies.fr>
  * Copyright 2020 NXP
  *
- * Software that is described herein is for illustrative purposes only
- * which provides customers with programming information regarding the
- * NXP RTC products.  This software is supplied "AS IS" without any
- * warranties of any kind, and NXP Semiconductors and its licensor disclaim any and
- * all warranties, express or implied, including all implied warranties of
- * merchantability, fitness for a particular purpose and non-infringement of
- * intellectual property rights.  NXP Semiconductors assumes no responsibility
- * or liability for the use of the software, conveys no license or rights under any
- * patent, copyright, mask work right, or any other intellectual property rights in
- * or to any products. NXP Semiconductors reserves the right to make changes
- * in the software without notification. NXP Semiconductors also makes no
- * representation or warranty that such application will be suitable for the
- * specified use without further testing or modification.
+ * based on the other drivers in this same directory.
  *
- * Permission to use, copy, modify, and distribute this software and its
- * documentation is hereby granted, under NXP Semiconductors' and its
- * licensor's relevant copyrights in the software, without fee, provided that it
- * is used in conjunction with NXP Semiconductors RTC products.  This copyright,
- * permission, and disclaimer notice must appear in all copies of this code.
  */
 
-
-
-#include <linux/i2c.h>
-#include <linux/spi/spi.h>
 #include <linux/bcd.h>
-#include <linux/rtc.h>
-#include <linux/slab.h>
+#include <linux/i2c.h>
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/regmap.h>
+#include <linux/rtc.h>
+#include <linux/slab.h>
+#include <linux/spi/spi.h>
 #include <linux/watchdog.h>
 
- /* Control register 1 */
-#define PCF2131_REG_CTRL1				0x00
+/* Control register 1 */
+#define PCF2131_REG_CTRL1		0x00
 #define PCF2131_BIT_CTRL1_SI			BIT(0)
 #define PCF2131_BIT_CTRL1_MI			BIT(1)
 #define PCF2131_BIT_CTRL1_12_24			BIT(2)
 #define PCF2131_BIT_CTRL1_POR_OVRD		BIT(3)
-#define PCF2131_BIT_CTRL1_100TH_S_DIS	BIT(4)
+#define PCF2131_BIT_CTRL1_100TH_S_DIS		BIT(4)
 #define PCF2131_BIT_CTRL1_STOP			BIT(5)
 #define PCF2131_BIT_CTRL1_TC_DIS		BIT(6)
 
- /* Control register 2 */
-#define PCF2131_REG_CTRL2				0x01
+/* Control register 2 */
+#define PCF2131_REG_CTRL2		0x01
 
- /* Control register 3 */
-#define PCF2131_REG_CTRL3				0x02
+/* Control register 3 */
+#define PCF2131_REG_CTRL3		0x02
 #define PCF2131_BIT_CTRL3_BLIE			BIT(0)
 #define PCF2131_BIT_CTRL3_BIE			BIT(1)
 #define PCF2131_BIT_CTRL3_BLF			BIT(2)
 #define PCF2131_BIT_CTRL3_BF			BIT(3)
 #define PCF2131_BIT_CTRL3_BTSE			BIT(4)
 
- /* Control register 4 */
-#define PCF2131_REG_CTRL4				0x03
+/* Control register 4 */
+#define PCF2131_REG_CTRL4		0x03
 #define PCF2131_BIT_CTRL4_TSF1			BIT(7)
 #define PCF2131_BIT_CTRL4_TSF2			BIT(6)
 #define PCF2131_BIT_CTRL4_TSF3			BIT(5)
 #define PCF2131_BIT_CTRL4_TSF4			BIT(4)
 
- /* Control register 5 */
-#define PCF2131_REG_CTRL5				0x04
+/* Control register 5 */
+#define PCF2131_REG_CTRL5		0x04
 #define PCF2131_BIT_CTRL5_TSIE1			BIT(7)
 #define PCF2131_BIT_CTRL5_TSIE2			BIT(6)
 #define PCF2131_BIT_CTRL5_TSIE3			BIT(5)
 #define PCF2131_BIT_CTRL5_TSIE4			BIT(4)
 
 /* Software reset register */
-#define PCF2131_REG_SR_RESET			0x05
-#define PCF2131_SR_VAL_SoftReset		0x2c
-#define PCF2131_SR_VAL_Clr_Pres			0xa4
-#define PCF2131_SR_VAL_Clr_TS			0x25
+#define PCF2131_REG_SR_RESET		0x05
+#define PCF2131_SR_VAL_SoftReset	0x2c
+#define PCF2131_SR_VAL_Clr_Pres		0xa4
+#define PCF2131_SR_VAL_Clr_TS		0x25
 
 /* Time and date registers */
-#define PCF2131_REG_100th_SC			0x06
-#define PCF2131_REG_SC					0x07
-#define PCF2131_BIT_SC_OSF				BIT(7)
-#define PCF2131_REG_MN					0x08
-#define PCF2131_REG_HR					0x09
-#define PCF2131_REG_DM					0x0a
-#define PCF2131_REG_DW					0x0b
-#define PCF2131_REG_MO					0x0c
-#define PCF2131_REG_YR					0x0d
+#define PCF2131_REG_100th_SC		0x06
+#define PCF2131_REG_SC			0x07
+#define PCF2131_BIT_SC_OSF			BIT(7)
+#define PCF2131_REG_MN			0x08
+#define PCF2131_REG_HR			0x09
+#define PCF2131_REG_DM			0x0a
+#define PCF2131_REG_DW			0x0b
+#define PCF2131_REG_MO			0x0c
+#define PCF2131_REG_YR			0x0d
 
 /* Watchdog registers */
-#define PCF2131_REG_WD_CTL				0x35
+#define PCF2131_REG_WD_CTL		0x35
 #define PCF2131_BIT_WD_CTL_TF0			BIT(0)
 #define PCF2131_BIT_WD_CTL_TF1			BIT(1)
 #define PCF2131_BIT_WD_CTL_TI_TP		BIT(5)
 #define PCF2131_BIT_WD_CTL_T			BIT(6)
 #define PCF2131_BIT_WD_CTL_CD			BIT(7)
-#define PCF2131_REG_WD_VAL				0x36
+#define PCF2131_REG_WD_VAL		0x36
 
 /* Timestamp 1 registers */
-#define PCF2131_REG_TS1_CTRL			0x14
+#define PCF2131_REG_TS1_CTRL		0x14
 #define PCF2131_BIT_TS1_CTRL_TSOFF		BIT(6)
 #define PCF2131_BIT_TS1_CTRL_TSM		BIT(7)
-#define PCF2131_REG_TS1_SC				0x15
-#define PCF2131_REG_TS1_MN				0x16
-#define PCF2131_REG_TS1_HR				0x17
-#define PCF2131_REG_TS1_DM				0x18
-#define PCF2131_REG_TS1_MO				0x19
-#define PCF2131_REG_TS1_YR				0x1a
+#define PCF2131_REG_TS1_SC		0x15
+#define PCF2131_REG_TS1_MN		0x16
+#define PCF2131_REG_TS1_HR		0x17
+#define PCF2131_REG_TS1_DM		0x18
+#define PCF2131_REG_TS1_MO		0x19
+#define PCF2131_REG_TS1_YR		0x1a
 
 /* Timestamp 2 registers */
-#define PCF2131_REG_TS2_CTRL			0x1b
+#define PCF2131_REG_TS2_CTRL		0x1b
 #define PCF2131_BIT_TS2_CTRL_TSOFF		BIT(6)
 #define PCF2131_BIT_TS2_CTRL_TSM		BIT(7)
-#define PCF2131_REG_TS2_SC				0x1c
-#define PCF2131_REG_TS2_MN				0x1d
-#define PCF2131_REG_TS2_HR				0x1e
-#define PCF2131_REG_TS2_DM				0x1f
-#define PCF2131_REG_TS2_MO				0x20
-#define PCF2131_REG_TS2_YR				0x21
+#define PCF2131_REG_TS2_SC		0x1c
+#define PCF2131_REG_TS2_MN		0x1d
+#define PCF2131_REG_TS2_HR		0x1e
+#define PCF2131_REG_TS2_DM		0x1f
+#define PCF2131_REG_TS2_MO		0x20
+#define PCF2131_REG_TS2_YR		0x21
 
 /* Timestamp 3 registers */
-#define PCF2131_REG_TS3_CTRL			0x22
+#define PCF2131_REG_TS3_CTRL		0x22
 #define PCF2131_BIT_TS3_CTRL_TSOFF		BIT(6)
 #define PCF2131_BIT_TS3_CTRL_TSM		BIT(7)
-#define PCF2131_REG_TS3_SC				0x23
-#define PCF2131_REG_TS3_MN				0x24
-#define PCF2131_REG_TS3_HR				0x25
-#define PCF2131_REG_TS3_DM				0x26
-#define PCF2131_REG_TS3_MO				0x27
-#define PCF2131_REG_TS3_YR				0x28
+#define PCF2131_REG_TS3_SC		0x23
+#define PCF2131_REG_TS3_MN		0x24
+#define PCF2131_REG_TS3_HR		0x25
+#define PCF2131_REG_TS3_DM		0x26
+#define PCF2131_REG_TS3_MO		0x27
+#define PCF2131_REG_TS3_YR		0x28
 
 /* Timestamp 4 registers */
-#define PCF2131_REG_TS4_CTRL			0x29
+#define PCF2131_REG_TS4_CTRL		0x29
 #define PCF2131_BIT_TS4_CTRL_TSOFF		BIT(6)
 #define PCF2131_BIT_TS4_CTRL_TSM		BIT(7)
-#define PCF2131_REG_TS4_SC				0x2a
-#define PCF2131_REG_TS4_MN				0x2b
-#define PCF2131_REG_TS4_HR				0x2c
-#define PCF2131_REG_TS4_DM				0x2d
-#define PCF2131_REG_TS4_MO				0x2e
-#define PCF2131_REG_TS4_YR				0x2f
+#define PCF2131_REG_TS4_SC		0x2a
+#define PCF2131_REG_TS4_MN		0x2b
+#define PCF2131_REG_TS4_HR		0x2c
+#define PCF2131_REG_TS4_DM		0x2d
+#define PCF2131_REG_TS4_MO		0x2e
+#define PCF2131_REG_TS4_YR		0x2f
 
 /* Watchdog timer value constants */
-#define PCF2131_WD_VAL_STOP				0
-#define PCF2131_WD_VAL_MIN				2
-#define PCF2131_WD_VAL_MAX				255
-#define PCF2131_WD_VAL_DEFAULT			60
+#define PCF2131_WD_VAL_STOP		0
+#define PCF2131_WD_VAL_MIN		2
+#define PCF2131_WD_VAL_MAX		255
+#define PCF2131_WD_VAL_DEFAULT		60
 
 struct pcf2131 {
-	struct rtc_device* rtc;
+	struct rtc_device *rtc;
 	struct watchdog_device wdd;
-	struct regmap* regmap;
+	struct regmap *regmap;
 };
 
-
 /*
  * In the routines that deal directly with the pcf2131 hardware, we use
  * rtc_time -- month 0-11, hour 0-23, yr = calendar year-epoch.
@@ -186,8 +171,7 @@ static int pcf2131_rtc_read_time(struct device *dev, struct rtc_time *tm)
 	}
 
 	dev_dbg(dev,
-		"%s: raw data is cr3=%02x, sec=%02x, min=%02x, hr=%02x, "
-		"mday=%02x, wday=%02x, mon=%02x, year=%02x\n",
+		"%s: raw data is cr3=%02x, sec=%02x, min=%02x, hr=%02x, mday=%02x, wday=%02x, mon=%02x, year=%02x\n",
 		__func__, buf[PCF2131_REG_CTRL3], buf[PCF2131_REG_SC],
 		buf[PCF2131_REG_MN], buf[PCF2131_REG_HR],
 		buf[PCF2131_REG_DM], buf[PCF2131_REG_DW],
@@ -202,8 +186,7 @@ static int pcf2131_rtc_read_time(struct device *dev, struct rtc_time *tm)
 	tm->tm_year = bcd2bin(buf[PCF2131_REG_YR]);
 	tm->tm_year += 100;
 
-	dev_dbg(dev, "%s: tm is secs=%d, mins=%d, hours=%d, "
-		"mday=%d, mon=%d, year=%d, wday=%d\n",
+	dev_dbg(dev, "%s: tm is secs=%d, mins=%d, hours=%d, mday=%d, mon=%d, year=%d, wday=%d\n",
 		__func__,
 		tm->tm_sec, tm->tm_min, tm->tm_hour,
 		tm->tm_mday, tm->tm_mon, tm->tm_year, tm->tm_wday);
@@ -238,8 +221,7 @@ static int pcf2131_rtc_set_time(struct device *dev, struct rtc_time *tm)
 	buf[PCF2131_REG_CTRL3]		&= 0x1f;	/* PWRMNG = 0 */
 	buf[PCF2131_REG_SR_RESET]	= PCF2131_SR_VAL_Clr_Pres;
 
-	dev_dbg(dev, "%s: secs=%d, mins=%d, hours=%d, "
-		"mday=%d, mon=%d, year=%d, wday=%d\n",
+	dev_dbg(dev, "%s: secs=%d, mins=%d, hours=%d, mday=%d, mon=%d, year=%d, wday=%d\n",
 		__func__,
 		tm->tm_sec, tm->tm_min, tm->tm_hour,
 		tm->tm_mday, tm->tm_mon, tm->tm_year, tm->tm_wday);
@@ -258,15 +240,13 @@ static int pcf2131_rtc_set_time(struct device *dev, struct rtc_time *tm)
 	/* year */
 	buf[PCF2131_REG_YR] = bin2bcd(tm->tm_year - 100);
 
-	 /* write register's data */
+	/* write register's data */
 	err = regmap_bulk_write(pcf2131->regmap, PCF2131_REG_CTRL1, buf + PCF2131_REG_CTRL1, 1);
 	err += regmap_bulk_write(pcf2131->regmap, PCF2131_REG_CTRL3, buf + PCF2131_REG_CTRL3, 1);
 	err += regmap_bulk_write(pcf2131->regmap, PCF2131_REG_SR_RESET, buf + PCF2131_REG_SR_RESET, 1);
 	err += regmap_bulk_write(pcf2131->regmap, PCF2131_REG_100th_SC, buf + PCF2131_REG_100th_SC, 8);
 	err += regmap_update_bits(pcf2131->regmap, PCF2131_REG_CTRL1,
 		PCF2131_BIT_CTRL1_STOP, 0);
-	//buf[PCF2131_REG_CTRL1] &= ~PCF2131_BIT_CTRL1_STOP;
-	//err += regmap_bulk_write(pcf2131->regmap, PCF2131_REG_CTRL1, buf + PCF2131_REG_CTRL1, 1);
 
 	if (err) {
 		dev_err(dev,
@@ -322,13 +302,7 @@ static int pcf2131_wdt_ping(struct watchdog_device *wdd)
 	return regmap_write(pcf2131->regmap, PCF2131_REG_WD_VAL, wdd->timeout);
 }
 
-/*
- * Restart watchdog timer if feature is active.
- *
- * Note: Reading CTRL2 register causes watchdog to stop which is unfortunate,
- * since register also contain control/status flags for other features.
- * Always call this function after reading CTRL2 register.
- */
+/* Restart watchdog timer if feature is active. */
 static int pcf2131_wdt_active_ping(struct watchdog_device *wdd)
 {
 	int ret = 0;
@@ -397,10 +371,6 @@ static ssize_t timestamp0_store(struct device *dev,
 		return ret;
 	}
 
-	ret = pcf2131_wdt_active_ping(&pcf2131->wdd);
-	if (ret)
-		return ret;
-
 	return count;
 };
 
@@ -420,18 +390,13 @@ static ssize_t timestamp0_show(struct device *dev,
 	}
 
 	dev_dbg(dev,
-		"%s: raw data is cr1=%02x, cr2=%02x, cr3=%02x, ts_sc=%02x, "
-		"ts_mn=%02x, ts_hr=%02x, ts_dm=%02x, ts_mo=%02x, ts_yr=%02x\n",
+		"%s: raw data is cr1=%02x, cr2=%02x, cr3=%02x, ts_sc=%02x, ts_mn=%02x, ts_hr=%02x, ts_dm=%02x, ts_mo=%02x, ts_yr=%02x\n",
 		__func__, data[PCF2131_REG_CTRL1], data[PCF2131_REG_CTRL2],
 		data[PCF2131_REG_CTRL3], data[PCF2131_REG_TS1_SC],
 		data[PCF2131_REG_TS1_MN], data[PCF2131_REG_TS1_HR],
 		data[PCF2131_REG_TS1_DM], data[PCF2131_REG_TS1_MO],
 		data[PCF2131_REG_TS1_YR]);
 
-	ret = pcf2131_wdt_active_ping(&pcf2131->wdd);
-	if (ret)
-		return ret;
-
 	if (!(data[PCF2131_REG_CTRL4] & PCF2131_BIT_CTRL4_TSF1))
 		return 0;
 
@@ -556,7 +521,7 @@ static int pcf2131_probe(struct device *dev, struct regmap *regmap,
 				 PCF2131_BIT_TS1_CTRL_TSM,
 				 PCF2131_BIT_TS1_CTRL_TSM);
 	if (ret) {
-		dev_err(dev, "%s: tamper detection config (ts_ctrl) failed\n",
+		dev_err(dev, "%s: tamper detection config (ts1_ctrl) failed\n",
 			__func__);
 		return ret;
 	}
@@ -570,7 +535,7 @@ static int pcf2131_probe(struct device *dev, struct regmap *regmap,
 				 PCF2131_BIT_CTRL5_TSIE1,
 				 PCF2131_BIT_CTRL5_TSIE1);
 	if (ret) {
-		dev_err(dev, "%s: tamper detection config (ctrl2) failed\n",
+		dev_err(dev, "%s: tamper detection config (ctrl5) failed\n",
 			__func__);
 		return ret;
 	}
@@ -588,7 +553,6 @@ static int pcf2131_probe(struct device *dev, struct regmap *regmap,
 #ifdef CONFIG_OF
 static const struct of_device_id pcf2131_of_match[] = {
 	{ .compatible = "nxp,pcf2131" },
-	{},
 	{}
 };
 MODULE_DEVICE_TABLE(of, pcf2131_of_match);
@@ -699,7 +663,6 @@ static int pcf2131_i2c_probe(struct i2c_client *client,
 
 static const struct i2c_device_id pcf2131_i2c_id[] = {
 	{ "pcf2131", 1 },
-	{ },
 	{ }
 };
 MODULE_DEVICE_TABLE(i2c, pcf2131_i2c_id);
@@ -764,7 +727,6 @@ static int pcf2131_spi_probe(struct spi_device *spi)
 
 static const struct spi_device_id pcf2131_spi_id[] = {
 	{ "pcf2131", 1 },
-	{ },
 	{ }
 };
 MODULE_DEVICE_TABLE(spi, pcf2131_spi_id);
@@ -826,4 +788,8 @@ static void __exit pcf2131_exit(void)
 	pcf2131_spi_unregister_driver();
 	pcf2131_i2c_unregister_driver();
 }
-module_exit(pcf2131_exit)
\ No newline at end of file
+module_exit(pcf2131_exit)
+
+MODULE_AUTHOR("NXP");
+MODULE_DESCRIPTION("NXP PCF2131 RTC driver");
+MODULE_LICENSE("GPL v2");
