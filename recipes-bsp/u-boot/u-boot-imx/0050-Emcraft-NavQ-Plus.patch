diff --git a/arch/arm/dts/imx8mp-evk.dts b/arch/arm/dts/imx8mp-evk.dts
index f0159d499e..29e0f802be 100644
--- a/arch/arm/dts/imx8mp-evk.dts
+++ b/arch/arm/dts/imx8mp-evk.dts
@@ -57,6 +57,7 @@
 		enable-active-high;
 	};
 
+/*
 	reg_usb1_host_vbus: regulator-usb1-vbus {
 		compatible = "regulator-fixed";
 		regulator-name = "usb1_host_vbus";
@@ -68,6 +69,7 @@
 		enable-active-high;
 		regulator-always-on;
 	};
+*/
 
 	reg_usdhc2_vmmc: regulator-usdhc2 {
 		compatible = "regulator-fixed";
@@ -82,21 +84,21 @@
 		off-on-delay-us = <12000>;
 	};
 
+/*
 	dsi_host: dsi-host {
 		compatible = "samsung,sec-mipi-dsi";
 		status = "okay";
 	};
+*/
 
+/*
 	rm67191_panel {
 		compatible = "raydium,rm67191";
 		pinctrl-names = "default";
 		pinctrl-0 = <&pinctrl_mipi_dsi_en>;
 		reset-gpio = <&gpio1 8 GPIO_ACTIVE_LOW>;
 		dsi-lanes = <4>;
-		video-mode = <2>;	/* 0: burst mode
-					 * 1: non-burst mode with sync event
-					 * 2: non-burst mode with sync pulse
-					 */
+		video-mode = <2>;	
 		panel-width-mm = <68>;
 		panel-height-mm = <121>;
 		status = "okay";
@@ -107,6 +109,8 @@
 			};
 		};
 	};
+*/
+
 };
 
 &eqos {
@@ -325,6 +329,7 @@
 	sda-gpios = <&gpio5 17 GPIO_ACTIVE_HIGH>;
 	status = "okay";
 
+/*
 	adv_bridge: adv7535@3d {
 		compatible = "adi,adv7533";
 		reg = <0x3d>;
@@ -338,6 +343,7 @@
 			};
 		};
 	};
+*/
 };
 
 &i2c3 {
@@ -349,14 +355,23 @@
 	sda-gpios = <&gpio5 19 GPIO_ACTIVE_HIGH>;
 	status = "okay";
 
-	pca6416: gpio@20 {
-		compatible = "ti,tca6416";
-		reg = <0x20>;
-		gpio-controller;
-		#gpio-cells = <2>;
-	};
 };
 
+
+
+&i2c4 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default", "gpio";
+        pinctrl-0 = <&pinctrl_i2c4>;
+        pinctrl-1 = <&pinctrl_i2c4_gpio>;
+        scl-gpios = <&gpio5 20 GPIO_ACTIVE_HIGH>;
+        sda-gpios = <&gpio5 21 GPIO_ACTIVE_HIGH>;
+        status = "okay";
+
+};
+
+
+/*
 &lcdif1 {
 	status = "okay";
 };
@@ -377,18 +392,22 @@
 	};
 };
 
+*/
+
 &i2c3 {
 	clock-frequency = <400000>;
 	pinctrl-names = "default";
 	pinctrl-0 = <&pinctrl_i2c3>;
 	status = "okay";
 
+/*
 	pca6416: gpio@20 {
 		compatible = "ti,tca6416";
 		reg = <0x20>;
 		gpio-controller;
 		#gpio-cells = <2>;
 	};
+*/
 };
 
 &snvs_pwrkey {
@@ -420,8 +439,12 @@
 };
 
 &usb_dwc3_1 {
-	dr_mode = "host";
-	status = "okay";
+        dr_mode = "otg";
+        hnp-disable;
+        srp-disable;
+        adp-disable;
+        usb-role-switch;
+        status = "okay";
 };
 
 &usdhc2 {
@@ -559,6 +582,14 @@
 		>;
 	};
 
+        pinctrl_i2c4: i2c4grp {
+                fsl,pins = <
+                        MX8MP_IOMUXC_I2C4_SCL__I2C4_SCL                 0x400001c3
+                        MX8MP_IOMUXC_I2C4_SDA__I2C4_SDA                 0x400001c3
+                >;
+        };
+
+
 	pinctrl_i2c1_gpio: i2c1grp-gpio {
 		fsl,pins = <
 			MX8MP_IOMUXC_I2C1_SCL__GPIO5_IO14        	0x1c3
@@ -580,11 +611,20 @@
 		>;
 	};
 
+        pinctrl_i2c4_gpio: i2c4grp-gpio {
+                fsl,pins = <
+                        MX8MP_IOMUXC_I2C4_SCL__GPIO5_IO20               0x1c3
+                        MX8MP_IOMUXC_I2C4_SDA__GPIO5_IO21               0x1c3
+                >;
+        };
+
+/*
 	pinctrl_mipi_dsi_en: mipi_dsi_en {
 		fsl,pins = <
 			MX8MP_IOMUXC_GPIO1_IO08__GPIO1_IO08	0x16
 		>;
 	};
+*/
 
 	pinctrl_pmic: pmicirq {
 		fsl,pins = <
@@ -592,15 +632,30 @@
 		>;
 	};
 
-	pinctrl_typec: typec1grp {
+
+	pinctrl_typec0: typec0grp {  // TCPC_nINT0 -- does not exist in EVK, the NavQ+ has this  IO at SAI5_RXD2
+                fsl,pins = <
+                        MX8MP_IOMUXC_SAI3_RXFS__GPIO4_IO28      0x1c4
+                >;
+        };
+
+        pinctrl_typec0_mux: typec0muxgrp { // USB0_SS_SEL -- does not exist in EVK, the NavQ+ has this  IO at SAI5_RXD0
+                fsl,pins = <
+                        MX8MP_IOMUXC_SAI5_RXD0__GPIO3_IO21      0x16
+                >;
+        };
+
+	pinctrl_typec1: typec1grp {  // TCPC_nINT1 -- routed to the SECOND port, in the NavQ+ this IO moved to SAI5_RXD2
 		fsl,pins = <
-			MX8MP_IOMUXC_SAI1_TXD7__GPIO4_IO19	0x1c4
+			/* MX8MP_IOMUXC_SAI1_TXD7__GPIO4_IO19	0x1c4 */
+			MX8MP_IOMUXC_SAI5_RXD2__GPIO3_IO23	0x1c4
 		>;
 	};
 
-	pinctrl_typec_mux: typec1muxgrp {
+	pinctrl_typec1_mux: typec1muxgrp { // USB1_SS_SEL -- routed to the SECOND port, in the NavQ+ this IO moved to SAI5_RXD1 
 		fsl,pins = <
-			MX8MP_IOMUXC_SAI1_MCLK__GPIO4_IO20	0x16
+			/* MX8MP_IOMUXC_SAI1_MCLK__GPIO4_IO20	0x16 */
+			MX8MP_IOMUXC_SAI5_RXD1__GPIO3_IO22	0x16
 		>;
 	};
 
@@ -617,11 +672,13 @@
 		>;
 	};
 
+/*
 	pinctrl_usb1_vbus: usb1grp {
 		fsl,pins = <
 			MX8MP_IOMUXC_GPIO1_IO14__GPIO1_IO14	0x19
 		>;
 	};
+*/
 
 	pinctrl_usdhc2: usdhc2grp {
 		fsl,pins = <
diff --git a/board/freescale/imx8mp_evk/imx8mp_evk.c b/board/freescale/imx8mp_evk/imx8mp_evk.c
index c4997439cc..ff9907d33b 100644
--- a/board/freescale/imx8mp_evk/imx8mp_evk.c
+++ b/board/freescale/imx8mp_evk/imx8mp_evk.c
@@ -3,6 +3,8 @@
  * Copyright 2019 NXP
  */
 
+#define DEBUG
+
 #include <common.h>
 #include <env.h>
 #include <errno.h>
@@ -158,58 +160,95 @@ static int setup_pd_switch(uint8_t i2c_bus, uint8_t addr)
 	return 0;
 }
 
-int pd_switch_snk_enable(struct tcpc_port *port)
+int pd_switch_snk0_enable(struct tcpc_port *port)
 {
 	if (port == &port1) {
 		debug("Setup pd switch on port 1\n");
-		return setup_pd_switch(1, 0x72);
+		return setup_pd_switch(3, 0x72);
 	} else
 		return -EINVAL;
 }
 
-/* Port2 is the power supply, port 1 does not support power */
+int pd_switch_snk1_enable(struct tcpc_port *port)
+{
+        if (port == &port2) {
+                debug("Setup pd switch on port 2\n");
+                return setup_pd_switch(3, 0x73);
+        } else
+                return -EINVAL;
+}
+
+
+/* so far both the ports are equal -- sink ports without power delivery */
 struct tcpc_port_config port1_config = {
-	.i2c_bus = 1, /*i2c2*/
-	.addr = 0x50,
+	.i2c_bus = 3, /*i2c4*/
+	.addr = 0x51,
 	.port_type = TYPEC_PORT_UFP,
 	.max_snk_mv = 20000,
 	.max_snk_ma = 3000,
 	.max_snk_mw = 45000,
 	.op_snk_mv = 15000,
-	.switch_setup_func = &pd_switch_snk_enable,
+	.switch_setup_func = &pd_switch_snk0_enable,
 	.disable_pd = true,
 };
 
 struct tcpc_port_config port2_config = {
-	.i2c_bus = 2, /*i2c3*/
-	.addr = 0x50,
+	.i2c_bus = 3, /*i2c4*/
+	.addr = 0x53,
 	.port_type = TYPEC_PORT_UFP,
 	.max_snk_mv = 20000,
 	.max_snk_ma = 3000,
 	.max_snk_mw = 45000,
 	.op_snk_mv = 15000,
+	.switch_setup_func = &pd_switch_snk1_enable,
+	.disable_pd = true,
 };
 
-#define USB_TYPEC_SEL IMX_GPIO_NR(4, 20)
-#define USB_TYPEC_EN IMX_GPIO_NR(2, 20)
+// EVK IOs are here::: 
+// #define USB_TYPEC_SEL IMX_GPIO_NR(4, 20)
+// #define USB_TYPEC_EN IMX_GPIO_NR(2, 20)
+//
+// NavQ+ IOs are here: SAI5_RXD0 SAI5_RXD1
+#define USB_TYPEC_SEL_PORT1 IMX_GPIO_NR(3, 21)		// SAI5_RXD0 -- USB1_SEL_3V3
+#define USB_TYPEC_SEL_PORT2 IMX_GPIO_NR(3, 22)		// SAI5_RXD1 -- USB2_SEL_3V3
+
+// USB1_TYPEC_EN_B does not exist in the NavQ
+
 
-static iomux_v3_cfg_t ss_mux_gpio[] = {
-	MX8MP_PAD_SAI1_MCLK__GPIO4_IO20 | MUX_PAD_CTRL(NO_PAD_CTRL),
-	MX8MP_PAD_SD2_WP__GPIO2_IO20 | MUX_PAD_CTRL(NO_PAD_CTRL),
+// TBD: review, maybe it's better to update
+static iomux_v3_cfg_t ss_mux_gpio_port1[] = {
+	//MX8MP_PAD_SAI1_MCLK__GPIO4_IO20 | MUX_PAD_CTRL(NO_PAD_CTRL), //SAI1_MCLK - EVK
+	MX8MP_PAD_SAI5_RXD0__GPIO3_IO21 | MUX_PAD_CTRL(NO_PAD_CTRL), // SAI5_RXD0 -- USB1_SEL_3V3
 };
 
-void ss_mux_select(enum typec_cc_polarity pol)
+static iomux_v3_cfg_t ss_mux_gpio_port2[] = {
+        //MX8MP_PAD_SAI1_MCLK__GPIO4_IO20 | MUX_PAD_CTRL(NO_PAD_CTRL), //SAI1_MCLKi
+	MX8MP_PAD_SAI5_RXD1__GPIO3_IO22 | MUX_PAD_CTRL(NO_PAD_CTRL), // SAI5_RXD1 -- USB2_SEL_3V3
+};
+
+
+void ss_mux_selecti_port1(enum typec_cc_polarity pol)
 {
 	if (pol == TYPEC_POLARITY_CC1)
-		gpio_direction_output(USB_TYPEC_SEL, 0);
+		gpio_direction_output(USB_TYPEC_SEL_PORT1, 0);
 	else
-		gpio_direction_output(USB_TYPEC_SEL, 1);
+		gpio_direction_output(USB_TYPEC_SEL_PORT1, 1);
 }
 
+void ss_mux_select_port2(enum typec_cc_polarity pol)
+{
+        if (pol == TYPEC_POLARITY_CC1)
+                gpio_direction_output(USB_TYPEC_SEL_PORT2, 0);
+        else
+                gpio_direction_output(USB_TYPEC_SEL_PORT2, 1);
+}
+
+
+
 static int setup_typec(void)
 {
 	int ret;
-	struct gpio_desc per_12v_desc;
+//	struct gpio_desc per_12v_desc;
 
 	debug("tcpc_init port 2\n");
 	ret = tcpc_init(&port2, port2_config, NULL);
@@ -217,10 +256,12 @@ static int setup_typec(void)
 		printf("%s: tcpc port2 init failed, err=%d\n",
 		       __func__, ret);
 	} else if (tcpc_pd_sink_check_charging(&port2)) {
+
 		printf("Power supply on USB2\n");
+		printf("Technically, it's OK to enable all the possible DC/DCs, but later\n");
 
 		/* Enable PER 12V, any check before it? */
-		ret = dm_gpio_lookup_name("gpio@20_1", &per_12v_desc);
+		/*ret = dm_gpio_lookup_name("gpio@20_1", &per_12v_desc);
 		if (ret) {
 			printf("%s lookup gpio@20_1 failed ret = %d\n", __func__, ret);
 			return -ENODEV;
@@ -230,25 +271,47 @@ static int setup_typec(void)
 		if (ret) {
 			printf("%s request per_12v failed ret = %d\n", __func__, ret);
 			return -EIO;
-		}
+		}*/
 
 		/* Enable PER 12V regulator */
-		dm_gpio_set_dir_flags(&per_12v_desc, GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+		//dm_gpio_set_dir_flags(&per_12v_desc, GPIOD_IS_OUT | GPIOD_IS_OUT_ACTIVE);
+		
+
 	}
 
+	
+	
 	debug("tcpc_init port 1\n");
-	imx_iomux_v3_setup_multiple_pads(ss_mux_gpio, ARRAY_SIZE(ss_mux_gpio));
-	gpio_request(USB_TYPEC_SEL, "typec_sel");
-	gpio_request(USB_TYPEC_EN, "typec_en");
-	gpio_direction_output(USB_TYPEC_EN, 0);
+	ret = tcpc_init(&port1, port1_config, NULL);
+        if (ret) {
+                printf("%s: tcpc port1 init failed, err=%d\n",
+                       __func__, ret);
+        } else if (tcpc_pd_sink_check_charging(&port1)) {
+
+                printf("Power supply on USB1\n");
+                printf("Technically, it's OK to enable all the possible DC/DCs, but later\n");
+	}
+
+
+	imx_iomux_v3_setup_multiple_pads(ss_mux_gpio_port1, ARRAY_SIZE(ss_mux_gpio_port1));
+        imx_iomux_v3_setup_multiple_pads(ss_mux_gpio_port2, ARRAY_SIZE(ss_mux_gpio_port2));
 
+
+	gpio_request(USB_TYPEC_SEL_PORT1, "typec_sel_port1");
+        gpio_request(USB_TYPEC_SEL_PORT2, "typec_sel_port2");
+
+
+	//gpio_request(USB_TYPEC_EN, "typec_en");
+	//gpio_direction_output(USB_TYPEC_EN, 0);
+	/*
 	ret = tcpc_init(&port1, port1_config, &ss_mux_select);
 	if (ret) {
 		printf("%s: tcpc port1 init failed, err=%d\n",
 		       __func__, ret);
 	} else {
 		return ret;
-	}
+	}*/
+
 
 	return ret;
 }
@@ -313,6 +376,8 @@ static void dwc3_nxp_usb_phy_init(struct dwc3_device *dwc3)
 	RegData &=~0x1;
 	writel(RegData, dwc3->base + USB_PHY_CTRL6);
 
+
+
 	RegData = readl(dwc3->base + USB_PHY_CTRL1);
 	RegData &= ~(USB_PHY_CTRL1_VDATSRCENB0 | USB_PHY_CTRL1_VDATDETENB0 |
 			USB_PHY_CTRL1_COMMONONN);
diff --git a/board/freescale/imx8mp_evk/lpddr4_timing.c b/board/freescale/imx8mp_evk/lpddr4_timing.c
old mode 100755
new mode 100644
index ea63d54eab..3546f6ca24
--- a/board/freescale/imx8mp_evk/lpddr4_timing.c
+++ b/board/freescale/imx8mp_evk/lpddr4_timing.c
@@ -1,79 +1,47 @@
-// SPDX-License-Identifier: GPL-2.0+
 /*
  * Copyright 2019 NXP
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ *
+ * Generated code from MX8M_DDR_tool
+ * Align with uboot version:
+ * imx_v2018.03_4.14.78_1.0.0_ga ~ imx_v2018.04_4.19.35_1.0.0_ga
  */
 
 #include <linux/kernel.h>
-#include <asm/arch/ddr.h>
+#include <asm/arch-imx8m/ddr.h>
 
 struct dram_cfg_param ddr_ddrc_cfg[] = {
 	/** Initialize DDRC registers **/
 	{ 0x3d400304, 0x1 },
 	{ 0x3d400030, 0x1 },
 	{ 0x3d400000, 0xa3080020 },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
 	{ 0x3d400020, 0x223 },
-	{ 0x3d400024, 0x124f800 },
-	{ 0x3d400064, 0x4900a8 },
-	{ 0x3d400070, 0x1027f90 },
-	{ 0x3d400074, 0x790 },
-	{ 0x3d4000d0, 0xc0030495 },
-	{ 0x3d4000d4, 0x770000 },
-	{ 0x3d4000dc, 0xc40024 },
-#else
-	{ 0x3d400020, 0x1323 },
-	{ 0x3d400024, 0x1e84800 },
-	{ 0x3d400064, 0x7a017c },
-#ifdef CONFIG_IMX8M_DRAM_INLINE_ECC
-	{ 0x3d400070, 0x1027f54 },
-#else
-	{ 0x3d400070, 0x1027f10 },
-#endif
-	{ 0x3d400074, 0x7b0 },
-	{ 0x3d4000d0, 0xc00307a3 },
-	{ 0x3d4000d4, 0xc50000 },
-	{ 0x3d4000dc, 0xf4003f },
-#endif
+	{ 0x3d400024, 0x16e3600 },
+	{ 0x3d400064, 0x5b00d2 },
+	{ 0x3d4000d0, 0xc00305ba },
+	{ 0x3d4000d4, 0x940000 },
+	{ 0x3d4000dc, 0xd4002d },
 	{ 0x3d4000e0, 0x330000 },
 	{ 0x3d4000e8, 0x660048 },
 	{ 0x3d4000ec, 0x160048 },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-	{ 0x3d400100, 0x1618141a },
-	{ 0x3d400104, 0x504a6 },
-	{ 0x3d40010c, 0x909000 },
-	{ 0x3d400110, 0xb04060b },
-	{ 0x3d400114, 0x2030909 },
-	{ 0x3d400118, 0x1010006 },
-	{ 0x3d40011c, 0x301 },
-	{ 0x3d400130, 0x20500 },
-	{ 0x3d400134, 0xb100002 },
-	{ 0x3d400138, 0xad },
-	{ 0x3d400144, 0x78003c },
-	{ 0x3d400180, 0x2580012 },
-	{ 0x3d400184, 0x1e0493e },
+	{ 0x3d400100, 0x191e1920 },
+	{ 0x3d400104, 0x60630 },
+	{ 0x3d40010c, 0xb0b000 },
+	{ 0x3d400110, 0xe04080e },
+	{ 0x3d400114, 0x2040c0c },
+	{ 0x3d400118, 0x1010007 },
+	{ 0x3d40011c, 0x401 },
+	{ 0x3d400130, 0x20600 },
+	{ 0x3d400134, 0xc100002 },
+	{ 0x3d400138, 0xd8 },
+	{ 0x3d400144, 0x96004b },
+	{ 0x3d400180, 0x2ee0017 },
+	{ 0x3d400184, 0x2605b8e },
 	{ 0x3d400188, 0x0 },
-	{ 0x3d400190, 0x4938208 },
+	{ 0x3d400190, 0x497820a },
 	{ 0x3d400194, 0x80303 },
-	{ 0x3d4001b4, 0x1308 },
-#else
-	{ 0x3d400100, 0x2028222a },
-	{ 0x3d400104, 0x807bf },
-	{ 0x3d40010c, 0xe0e000 },
-	{ 0x3d400110, 0x12040a12 },
-	{ 0x3d400114, 0x2050f0f },
-	{ 0x3d400118, 0x1010009 },
-	{ 0x3d40011c, 0x501 },
-	{ 0x3d400130, 0x20800 },
-	{ 0x3d400134, 0xe100002 },
-	{ 0x3d400138, 0x184 },
-	{ 0x3d400144, 0xc80064 },
-	{ 0x3d400180, 0x3e8001e },
-	{ 0x3d400184, 0x3207a12 },
-	{ 0x3d400188, 0x0 },
-	{ 0x3d400190, 0x49f820e },
-	{ 0x3d400194, 0x80303 },
-	{ 0x3d4001b4, 0x1f0e },
-#endif
+	{ 0x3d4001b4, 0x170a },
 	{ 0x3d4001a0, 0xe0400018 },
 	{ 0x3d4001a4, 0xdf00e4 },
 	{ 0x3d4001a8, 0x80000000 },
@@ -81,15 +49,14 @@ struct dram_cfg_param ddr_ddrc_cfg[] = {
 	{ 0x3d4001c0, 0x1 },
 	{ 0x3d4001c4, 0x1 },
 	{ 0x3d4000f4, 0xc99 },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-	{ 0x3d400108, 0x60c1514 },
-	{ 0x3d400200, 0x16 },
+	{ 0x3d400108, 0x70e1617 },
+	{ 0x3d400200, 0x17 },
 	{ 0x3d40020c, 0x0 },
 	{ 0x3d400210, 0x1f1f },
 	{ 0x3d400204, 0x80808 },
 	{ 0x3d400214, 0x7070707 },
-	{ 0x3d400218, 0x68070707 },
-	{ 0x3d40021c, 0xf08 },
+	{ 0x3d400218, 0x7070707 },
+	{ 0x3d40021c, 0xf07 },
 	{ 0x3d400250, 0x1f05 },
 	{ 0x3d400254, 0x1f },
 	{ 0x3d400264, 0x90003ff },
@@ -102,43 +69,8 @@ struct dram_cfg_param ddr_ddrc_cfg[] = {
 	{ 0x3d4004a0, 0x3ff0000 },
 	{ 0x3d402020, 0x21 },
 	{ 0x3d402024, 0x30d400 },
-	{ 0x3d402050, 0x20d000 },
+	{ 0x3d402050, 0x20d040 },
 	{ 0x3d402064, 0xc001c },
-#else
-	{ 0x3d400108, 0x9121c1c },
-#ifdef CONFIG_IMX8M_DRAM_INLINE_ECC
-	{ 0x3d400200, 0x13 },
-	{ 0x3d40020c, 0x13131300 },
-	{ 0x3d400210, 0x1f1f },
-	{ 0x3d400204, 0x50505 },
-	{ 0x3d400214, 0x4040404 },
-	{ 0x3d400218, 0x68040404 },
-#else
-	{ 0x3d400200, 0x16 },
-	{ 0x3d40020c, 0x0 },
-	{ 0x3d400210, 0x1f1f },
-	{ 0x3d400204, 0x80808 },
-	{ 0x3d400214, 0x7070707 },
-	{ 0x3d400218, 0x68070707 },
-#endif
-	{ 0x3d40021c, 0xf08 },
-	{ 0x3d400250, 0x1705 },
-	{ 0x3d400254, 0x2c },
-	{ 0x3d40025c, 0x4000030 },
-	{ 0x3d400264, 0x900093e7 },
-	{ 0x3d40026c, 0x2005574 },
-	{ 0x3d400400, 0x111 },
-	{ 0x3d400404, 0x72ff },
-	{ 0x3d400408, 0x72ff },
-	{ 0x3d400494, 0x2100e07 },
-	{ 0x3d400498, 0x620096 },
-	{ 0x3d40049c, 0x1100e07 },
-	{ 0x3d4004a0, 0xc8012c },
-	{ 0x3d402020, 0x1021 },
-	{ 0x3d402024, 0x30d400 },
-	{ 0x3d402050, 0x20d000 },
-	{ 0x3d402064, 0xc0026 },
-#endif
 	{ 0x3d4020dc, 0x840000 },
 	{ 0x3d4020e0, 0x330000 },
 	{ 0x3d4020e8, 0x660048 },
@@ -153,24 +85,17 @@ struct dram_cfg_param ddr_ddrc_cfg[] = {
 	{ 0x3d40211c, 0x301 },
 	{ 0x3d402130, 0x20300 },
 	{ 0x3d402134, 0xa100002 },
-	{ 0x3d402138, 0x27 },
+	{ 0x3d402138, 0x1d },
 	{ 0x3d402144, 0x14000a },
 	{ 0x3d402180, 0x640004 },
 	{ 0x3d402190, 0x3818200 },
 	{ 0x3d402194, 0x80303 },
 	{ 0x3d4021b4, 0x100 },
 	{ 0x3d4020f4, 0xc99 },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
 	{ 0x3d403020, 0x21 },
 	{ 0x3d403024, 0xc3500 },
-	{ 0x3d403050, 0x20d000 },
+	{ 0x3d403050, 0x20d040 },
 	{ 0x3d403064, 0x30007 },
-#else
-	{ 0x3d403020, 0x1021 },
-	{ 0x3d403024, 0xc3500 },
-	{ 0x3d403050, 0x20d000 },
-	{ 0x3d403064, 0x3000a },
-#endif
 	{ 0x3d4030dc, 0x840000 },
 	{ 0x3d4030e0, 0x330000 },
 	{ 0x3d4030e8, 0x660048 },
@@ -185,7 +110,7 @@ struct dram_cfg_param ddr_ddrc_cfg[] = {
 	{ 0x3d40311c, 0x301 },
 	{ 0x3d403130, 0x20300 },
 	{ 0x3d403134, 0xa100002 },
-	{ 0x3d403138, 0xa },
+	{ 0x3d403138, 0x8 },
 	{ 0x3d403144, 0x50003 },
 	{ 0x3d403180, 0x190004 },
 	{ 0x3d403190, 0x3818200 },
@@ -263,11 +188,7 @@ struct dram_cfg_param ddr_ddrphy_cfg[] = {
 	{ 0x7055, 0x1ff },
 	{ 0x8055, 0x1ff },
 	{ 0x9055, 0x1ff },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-	{ 0x200c5, 0xa },
-#else
-	{ 0x200c5, 0x18 },
-#endif
+	{ 0x200c5, 0x19 },
 	{ 0x1200c5, 0x7 },
 	{ 0x2200c5, 0x7 },
 	{ 0x2002e, 0x2 },
@@ -346,11 +267,7 @@ struct dram_cfg_param ddr_ddrphy_cfg[] = {
 	{ 0x20018, 0x3 },
 	{ 0x20075, 0x4 },
 	{ 0x20050, 0x0 },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-	{ 0x20008, 0x258 },
-#else
-	{ 0x20008, 0x3e8 },
-#endif
+	{ 0x20008, 0x2ee },
 	{ 0x120008, 0x64 },
 	{ 0x220008, 0x19 },
 	{ 0x20088, 0x9 },
@@ -1134,12 +1051,10 @@ struct dram_cfg_param ddr_ddrphy_trained_csr[] = {
 	{ 0x13730, 0x0 },
 	{ 0x13830, 0x0 },
 };
-
 /* P0 message block paremeter for training firmware */
 struct dram_cfg_param ddr_fsp0_cfg[] = {
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
 	{ 0xd0000, 0x0 },
-	{ 0x54003, 0x960 },
+	{ 0x54003, 0xbb8 },
 	{ 0x54004, 0x2 },
 	{ 0x54005, 0x2228 },
 	{ 0x54006, 0x14 },
@@ -1148,58 +1063,26 @@ struct dram_cfg_param ddr_fsp0_cfg[] = {
 	{ 0x5400b, 0x2 },
 	{ 0x5400f, 0x100 },
 	{ 0x54012, 0x310 },
-	{ 0x54019, 0x24c4 },
+	{ 0x54019, 0x2dd4 },
 	{ 0x5401a, 0x33 },
 	{ 0x5401b, 0x4866 },
 	{ 0x5401c, 0x4800 },
 	{ 0x5401e, 0x16 },
-	{ 0x5401f, 0x24c4 },
+	{ 0x5401f, 0x2dd4 },
 	{ 0x54020, 0x33 },
 	{ 0x54021, 0x4866 },
 	{ 0x54022, 0x4800 },
 	{ 0x54024, 0x16 },
 	{ 0x5402b, 0x1000 },
 	{ 0x5402c, 0x3 },
-	{ 0x54032, 0xc400 },
-	{ 0x54033, 0x3324 },
+	{ 0x54032, 0xd400 },
+	{ 0x54033, 0x332d },
 	{ 0x54034, 0x6600 },
 	{ 0x54035, 0x48 },
 	{ 0x54036, 0x48 },
 	{ 0x54037, 0x1600 },
-	{ 0x54038, 0xc400 },
-	{ 0x54039, 0x3324 },
-#else
-	{ 0xd0000, 0x0 },
-	{ 0x54003, 0xfa0 },
-	{ 0x54004, 0x2 },
-	{ 0x54005, 0x2228 },
-	{ 0x54006, 0x14 },
-	{ 0x54008, 0x131f },
-	{ 0x54009, 0xc8 },
-	{ 0x5400b, 0x2 },
-	{ 0x5400f, 0x100 },
-	{ 0x54012, 0x310 },
-	{ 0x54019, 0x3ff4 },
-	{ 0x5401a, 0x33 },
-	{ 0x5401b, 0x4866 },
-	{ 0x5401c, 0x4800 },
-	{ 0x5401e, 0x16 },
-	{ 0x5401f, 0x3ff4 },
-	{ 0x54020, 0x33 },
-	{ 0x54021, 0x4866 },
-	{ 0x54022, 0x4800 },
-	{ 0x54024, 0x16 },
-	{ 0x5402b, 0x1000 },
-	{ 0x5402c, 0x3 },
-	{ 0x54032, 0xf400 },
-	{ 0x54033, 0x333f },
-	{ 0x54034, 0x6600 },
-	{ 0x54035, 0x48 },
-	{ 0x54036, 0x48 },
-	{ 0x54037, 0x1600 },
-	{ 0x54038, 0xf400 },
-	{ 0x54039, 0x333f },
-#endif
+	{ 0x54038, 0xd400 },
+	{ 0x54039, 0x332d },
 	{ 0x5403a, 0x6600 },
 	{ 0x5403b, 0x48 },
 	{ 0x5403c, 0x48 },
@@ -1207,6 +1090,7 @@ struct dram_cfg_param ddr_fsp0_cfg[] = {
 	{ 0xd0000, 0x1 },
 };
 
+
 /* P1 message block paremeter for training firmware */
 struct dram_cfg_param ddr_fsp1_cfg[] = {
 	{ 0xd0000, 0x0 },
@@ -1247,6 +1131,7 @@ struct dram_cfg_param ddr_fsp1_cfg[] = {
 	{ 0xd0000, 0x1 },
 };
 
+
 /* P2 message block paremeter for training firmware */
 struct dram_cfg_param ddr_fsp2_cfg[] = {
 	{ 0xd0000, 0x0 },
@@ -1287,11 +1172,11 @@ struct dram_cfg_param ddr_fsp2_cfg[] = {
 	{ 0xd0000, 0x1 },
 };
 
+
 /* P0 2D message block paremeter for training firmware */
 struct dram_cfg_param ddr_fsp0_2d_cfg[] = {
 	{ 0xd0000, 0x0 },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-	{ 0x54003, 0x960 },
+	{ 0x54003, 0xbb8 },
 	{ 0x54004, 0x2 },
 	{ 0x54005, 0x2228 },
 	{ 0x54006, 0x14 },
@@ -1302,58 +1187,26 @@ struct dram_cfg_param ddr_fsp0_2d_cfg[] = {
 	{ 0x5400f, 0x100 },
 	{ 0x54010, 0x1f7f },
 	{ 0x54012, 0x310 },
-	{ 0x54019, 0x24c4 },
-	{ 0x5401a, 0x33 },
-	{ 0x5401b, 0x4866 },
-	{ 0x5401c, 0x4800 },
-	{ 0x5401e, 0x16 },
-	{ 0x5401f, 0x24c4 },
-	{ 0x54020, 0x33 },
-	{ 0x54021, 0x4866 },
-	{ 0x54022, 0x4800 },
-	{ 0x54024, 0x16 },
-	{ 0x5402b, 0x1000 },
-	{ 0x5402c, 0x3 },
-	{ 0x54032, 0xc400 },
-	{ 0x54033, 0x3324 },
-	{ 0x54034, 0x6600 },
-	{ 0x54035, 0x48 },
-	{ 0x54036, 0x48 },
-	{ 0x54037, 0x1600 },
-	{ 0x54038, 0xc400 },
-	{ 0x54039, 0x3324 },
-#else
-	{ 0x54003, 0xfa0 },
-	{ 0x54004, 0x2 },
-	{ 0x54005, 0x2228 },
-	{ 0x54006, 0x14 },
-	{ 0x54008, 0x61 },
-	{ 0x54009, 0xc8 },
-	{ 0x5400b, 0x2 },
-	{ 0x5400f, 0x100 },
-	{ 0x54010, 0x1f7f },
-	{ 0x54012, 0x310 },
-	{ 0x54019, 0x3ff4 },
+	{ 0x54019, 0x2dd4 },
 	{ 0x5401a, 0x33 },
 	{ 0x5401b, 0x4866 },
 	{ 0x5401c, 0x4800 },
 	{ 0x5401e, 0x16 },
-	{ 0x5401f, 0x3ff4 },
+	{ 0x5401f, 0x2dd4 },
 	{ 0x54020, 0x33 },
 	{ 0x54021, 0x4866 },
 	{ 0x54022, 0x4800 },
 	{ 0x54024, 0x16 },
 	{ 0x5402b, 0x1000 },
 	{ 0x5402c, 0x3 },
-	{ 0x54032, 0xf400 },
-	{ 0x54033, 0x333f },
+	{ 0x54032, 0xd400 },
+	{ 0x54033, 0x332d },
 	{ 0x54034, 0x6600 },
 	{ 0x54035, 0x48 },
 	{ 0x54036, 0x48 },
 	{ 0x54037, 0x1600 },
-	{ 0x54038, 0xf400 },
-	{ 0x54039, 0x333f },
-#endif
+	{ 0x54038, 0xd400 },
+	{ 0x54039, 0x332d },
 	{ 0x5403a, 0x6600 },
 	{ 0x5403b, 0x48 },
 	{ 0x5403c, 0x48 },
@@ -1781,58 +1634,67 @@ struct dram_cfg_param ddr_phy_pie[] = {
 	{ 0x90155, 0x20 },
 	{ 0x90156, 0x2aa },
 	{ 0x90157, 0x9 },
-	{ 0x90158, 0x8 },
-	{ 0x90159, 0xe8 },
-	{ 0x9015a, 0x109 },
-	{ 0x9015b, 0x0 },
-	{ 0x9015c, 0x8140 },
-	{ 0x9015d, 0x10c },
-	{ 0x9015e, 0x10 },
-	{ 0x9015f, 0x8138 },
-	{ 0x90160, 0x104 },
-	{ 0x90161, 0x8 },
-	{ 0x90162, 0x448 },
-	{ 0x90163, 0x109 },
-	{ 0x90164, 0xf },
-	{ 0x90165, 0x7c0 },
-	{ 0x90166, 0x109 },
-	{ 0x90167, 0x0 },
-	{ 0x90168, 0xe8 },
+	{ 0x90158, 0x0 },
+	{ 0x90159, 0x400 },
+	{ 0x9015a, 0x10e },
+	{ 0x9015b, 0x8 },
+	{ 0x9015c, 0xe8 },
+	{ 0x9015d, 0x109 },
+	{ 0x9015e, 0x0 },
+	{ 0x9015f, 0x8140 },
+	{ 0x90160, 0x10c },
+	{ 0x90161, 0x10 },
+	{ 0x90162, 0x8138 },
+	{ 0x90163, 0x10c },
+	{ 0x90164, 0x8 },
+	{ 0x90165, 0x7c8 },
+	{ 0x90166, 0x101 },
+	{ 0x90167, 0x8 },
+	{ 0x90168, 0x448 },
 	{ 0x90169, 0x109 },
-	{ 0x9016a, 0x47 },
-	{ 0x9016b, 0x630 },
+	{ 0x9016a, 0xf },
+	{ 0x9016b, 0x7c0 },
 	{ 0x9016c, 0x109 },
-	{ 0x9016d, 0x8 },
-	{ 0x9016e, 0x618 },
+	{ 0x9016d, 0x0 },
+	{ 0x9016e, 0xe8 },
 	{ 0x9016f, 0x109 },
-	{ 0x90170, 0x8 },
-	{ 0x90171, 0xe0 },
+	{ 0x90170, 0x47 },
+	{ 0x90171, 0x630 },
 	{ 0x90172, 0x109 },
-	{ 0x90173, 0x0 },
-	{ 0x90174, 0x7c8 },
+	{ 0x90173, 0x8 },
+	{ 0x90174, 0x618 },
 	{ 0x90175, 0x109 },
 	{ 0x90176, 0x8 },
-	{ 0x90177, 0x8140 },
-	{ 0x90178, 0x10c },
+	{ 0x90177, 0xe0 },
+	{ 0x90178, 0x109 },
 	{ 0x90179, 0x0 },
-	{ 0x9017a, 0x478 },
+	{ 0x9017a, 0x7c8 },
 	{ 0x9017b, 0x109 },
-	{ 0x9017c, 0x0 },
-	{ 0x9017d, 0x1 },
-	{ 0x9017e, 0x8 },
-	{ 0x9017f, 0x8 },
-	{ 0x90180, 0x4 },
-	{ 0x90181, 0x0 },
-	{ 0x90006, 0x8 },
-	{ 0x90007, 0x7c8 },
-	{ 0x90008, 0x109 },
+	{ 0x9017c, 0x8 },
+	{ 0x9017d, 0x8140 },
+	{ 0x9017e, 0x10c },
+	{ 0x9017f, 0x0 },
+	{ 0x90180, 0x478 },
+	{ 0x90181, 0x109 },
+	{ 0x90182, 0x0 },
+	{ 0x90183, 0x1 },
+	{ 0x90184, 0x8 },
+	{ 0x90185, 0x8 },
+	{ 0x90186, 0x4 },
+	{ 0x90187, 0x8 },
+	{ 0x90188, 0x8 },
+	{ 0x90189, 0x7c8 },
+	{ 0x9018a, 0x101 },
+	{ 0x90006, 0x0 },
+	{ 0x90007, 0x0 },
+	{ 0x90008, 0x8 },
 	{ 0x90009, 0x0 },
-	{ 0x9000a, 0x400 },
-	{ 0x9000b, 0x106 },
+	{ 0x9000a, 0x0 },
+	{ 0x9000b, 0x0 },
 	{ 0xd00e7, 0x400 },
 	{ 0x90017, 0x0 },
 	{ 0x9001f, 0x29 },
-	{ 0x90026, 0x68 },
+	{ 0x90026, 0x6a },
 	{ 0x400d0, 0x0 },
 	{ 0x400d1, 0x101 },
 	{ 0x400d2, 0x105 },
@@ -1842,16 +1704,9 @@ struct dram_cfg_param ddr_phy_pie[] = {
 	{ 0x400d6, 0x20a },
 	{ 0x400d7, 0x20b },
 	{ 0x2003a, 0x2 },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-	{ 0x2000b, 0x4b },
-	{ 0x2000c, 0x96 },
-	{ 0x2000d, 0x5dc },
-#else
-	{ 0x200be, 0x3 },
-	{ 0x2000b, 0x7d },
-	{ 0x2000c, 0xfa },
-	{ 0x2000d, 0x9c4 },
-#endif
+	{ 0x2000b, 0x5d },
+	{ 0x2000c, 0xbb },
+	{ 0x2000d, 0x753 },
 	{ 0x2000e, 0x2c },
 	{ 0x12000b, 0xc },
 	{ 0x12000c, 0x19 },
@@ -1871,12 +1726,6 @@ struct dram_cfg_param ddr_phy_pie[] = {
 	{ 0x90013, 0x6152 },
 	{ 0x20010, 0x5a },
 	{ 0x20011, 0x3 },
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-	{ 0x120010, 0x5a },
-	{ 0x120011, 0x3 },
-	{ 0x220010, 0x5a },
-	{ 0x220011, 0x3 },
-#endif
 	{ 0x40080, 0xe0 },
 	{ 0x40081, 0x12 },
 	{ 0x40082, 0xe0 },
@@ -1960,13 +1809,8 @@ struct dram_cfg_param ddr_phy_pie[] = {
 
 struct dram_fsp_msg ddr_dram_fsp_msg[] = {
 	{
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-		/* P0 2400mts 1D */
-		.drate = 2400,
-#else
-		/* P0 4000mts 1D */
-		.drate = 4000,
-#endif
+		/* P0 3000mts 1D */
+		.drate = 3000,
 		.fw_type = FW_1D_IMAGE,
 		.fsp_cfg = ddr_fsp0_cfg,
 		.fsp_cfg_num = ARRAY_SIZE(ddr_fsp0_cfg),
@@ -1986,13 +1830,8 @@ struct dram_fsp_msg ddr_dram_fsp_msg[] = {
 		.fsp_cfg_num = ARRAY_SIZE(ddr_fsp2_cfg),
 	},
 	{
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-                /* P0 2400mts 2D */
-                .drate = 2400,
-#else
-                /* P0 4000mts 2D */
-                .drate = 4000,
-#endif
+		/* P0 3000mts 2D */
+		.drate = 3000,
 		.fw_type = FW_2D_IMAGE,
 		.fsp_cfg = ddr_fsp0_2d_cfg,
 		.fsp_cfg_num = ARRAY_SIZE(ddr_fsp0_2d_cfg),
@@ -2011,39 +1850,6 @@ struct dram_timing_info dram_timing = {
 	.ddrphy_trained_csr_num = ARRAY_SIZE(ddr_ddrphy_trained_csr),
 	.ddrphy_pie = ddr_phy_pie,
 	.ddrphy_pie_num = ARRAY_SIZE(ddr_phy_pie),
-#ifdef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-	.fsp_table = { 2400, 400, 100, },
-#else
-        .fsp_table = { 4000, 400, 100, },
-#endif
+	.fsp_table = { 3000, 400, 100, },
 };
 
-#ifndef CONFIG_IMX8M_LPDDR4_FREQ0_2400MTS
-#ifdef CONFIG_IMX8M_DRAM_INLINE_ECC
-void board_dram_ecc_scrub(void)
-{
-	ddrc_inline_ecc_scrub(0x0,0x3ffffff);
-	ddrc_inline_ecc_scrub(0x20000000,0x23ffffff);
-	ddrc_inline_ecc_scrub(0x40000000,0x43ffffff);
-	ddrc_inline_ecc_scrub(0x4000000,0x7ffffff);
-	ddrc_inline_ecc_scrub(0x24000000,0x27ffffff);
-	ddrc_inline_ecc_scrub(0x44000000,0x47ffffff);
-	ddrc_inline_ecc_scrub(0x8000000,0xbffffff);
-	ddrc_inline_ecc_scrub(0x28000000,0x2bffffff);
-	ddrc_inline_ecc_scrub(0x48000000,0x4bffffff);
-	ddrc_inline_ecc_scrub(0xc000000,0xfffffff);
-	ddrc_inline_ecc_scrub(0x2c000000,0x2fffffff);
-	ddrc_inline_ecc_scrub(0x4c000000,0x4fffffff);
-	ddrc_inline_ecc_scrub(0x10000000,0x13ffffff);
-	ddrc_inline_ecc_scrub(0x30000000,0x33ffffff);
-	ddrc_inline_ecc_scrub(0x50000000,0x53ffffff);
-	ddrc_inline_ecc_scrub(0x14000000,0x17ffffff);
-	ddrc_inline_ecc_scrub(0x34000000,0x37ffffff);
-	ddrc_inline_ecc_scrub(0x54000000,0x57ffffff);
-	ddrc_inline_ecc_scrub(0x18000000,0x1bffffff);
-	ddrc_inline_ecc_scrub(0x38000000,0x3bffffff);
-	ddrc_inline_ecc_scrub(0x58000000,0x5bffffff);
-	ddrc_inline_ecc_scrub_end(0x0,0x5fffffff);
-}
-#endif
-#endif
diff --git a/include/configs/imx8mp_evk.h b/include/configs/imx8mp_evk.h
index 10e87f349d..c48caeac7c 100644
--- a/include/configs/imx8mp_evk.h
+++ b/include/configs/imx8mp_evk.h
@@ -209,7 +209,7 @@
 /* Size of malloc() pool */
 #define CONFIG_SYS_MALLOC_LEN		SZ_32M
 
-/* Totally 6GB DDR */
+/* Totally 4GB DDR --- KINGSTON*/
 #define CONFIG_SYS_SDRAM_BASE		0x40000000
 #define PHYS_SDRAM			0x40000000
 #define PHYS_SDRAM_SIZE			0xC0000000	/* 3 GB */
@@ -217,7 +217,7 @@
 #ifdef CONFIG_TARGET_IMX8MP_DDR4_EVK
 #define PHYS_SDRAM_2_SIZE		0x40000000	/* 1 GB */
 #else
-#define PHYS_SDRAM_2_SIZE		0xC0000000	/* 3 GB */
+#define PHYS_SDRAM_2_SIZE		0x40000000	/* 1 GB */
 #endif
 
 #define CONFIG_MXC_UART_BASE		UART2_BASE_ADDR

